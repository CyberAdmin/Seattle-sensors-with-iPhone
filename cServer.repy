"""
	PLEASE RUN 
		python repypp.py comServer.mix cServer.repy 
	THEN RUN cServer.repy ON THE VESSEL.

	THIS P2P NETWORK IS COMPRISED OF NODES AND SUPER-NODES. NODES AND SUPER-NODES BOTH SHARE THE SAME JOB OF
	SHARING AND QUERYING SENSOR DATA WHEN NEEDED, HOWEVER SUPER-NODES ARE INCHARGE OF ACTIVATING NEW NODES TO
	THE NETWORK. FURTHERMORE, SUPER-NODES CONTAIN A LIST OF ALL NODES IN THE NETWORK AND DISTRIBUTE THAT LIST
	TO ALL NODES.

	




"""
#begin include xmlparse.repy
"""
<Program Name>
  xmlparse.repy

<Started>
  April 2009

<Author>
  Conrad Meyer <cemeyer@u.washington.edu>

<Purpose>
  Provide a relatively simplistic but usable xml parsing library for
  RePy.
"""

class xmlparse_XMLParseError(Exception):
  """Exception raised when an error is encountered parsing the XML."""
  pass




class xmlparse_XMLTreeNode:
  """
  <Purpose>
    Provide a simple tree structure for XML data.

  <Exceptions>
    None.

  <Example Use>
    node = xmlparse_parse("<Some><xml><data></data></xml></Some>")
  """   


  def __init__(self, tag_name):
    self.tag_name = tag_name
    self.children = None
    self.content = None
    self.attributes = {}


  def __repr__(self):
    """Provide a pretty representation of an XML tree."""

    if self.content is not None:
      return "%s:\"%s\"" % (self.tag_name, self.content)
    else:
      return "%s:%s" % (self.tag_name, str(self.children))


  def to_string(self):
    result = "<" + self.tag_name
    for attribute_name in self.attributes.keys():
      attribute_value_escaped = \
          self.attributes[attribute_name].replace("\"", "\\\"")
      result += " " + attribute_name + "=\"" + attribute_value_escaped + "\""
    
    if self.content is None:
      result += ">"
      for childnode in self.children:
        result += childnode.to_string()
      result += "</" + self.tag_name + ">"
    else:
      if len(self.content) == 0:
        result += "/>"
      else:
        result += ">" + self.content + "</" + self.tag_name + ">"

    return result




def xmlparse_parse(data):
  """
  <Purpose>
    Parses an XML string into an xmlparse_XMLTreeNode containing the root
    item.

  <Arguments>
    data:
           The data to parse.

  <Exceptions>
    xmlparse_XMLParseError if parsing fails.

  <Side Effects>
    None.

  <Returns>
    An xmlparse_XMLTreeNode tree.
  """

  data = data.lstrip()
  if data.startswith("<?xml"):
    data = data[data.find("?>")+2:]
  
  # Well-formed XML Documents have exactly one root node
  parsed_elements = _xmlparse_parse(data)
  if len(parsed_elements) != 1:
    raise xmlparse_XMLParseError("XML response from server contained more than one root node")

  return parsed_elements[0]




def _xmlparse_read_attributes(string):
  # Returns a pair containing the dictionary of attributes and remainder
  # of the string on success; excepts on failure.

  # Q_n corresponds to the state_* constant of the same value. The starting
  # node is Q_1.
  #
  #  [ Done ]
  #     ^
  #     |
  #     | (>, /)
  #     |
  #     \--------\ 
  #              |
  #        ,-.   | v-----------------------------------\
  # space (   [ Q_1 ]                                  |
  #        `->   | ^-----------------------\ (')       |
  #              |                         |           |
  #              |                (')      |   <-.     | (")
  #              | non-space   /------->[ Q_4 ]   )    |
  #              |             |               `-'     |
  #  (space)     v     (=)     |             (other)   |
  #     /-----[ Q_2 ]------>[ Q_3 ]-------->[ Q_5 ]----/
  #     |      ^   )           |      (")    ^   )
  #     |       `-'            |              `-'
  #     |     (other)   (other)|             (other)
  #     |                      |
  #     v                      |
  #[Exception]<----------------/

  # Basically the state machine is used to read a list of attribute-pairs,
  # terminated by a '/' or '>'. Attribute pairs either look like:
  #   name='value'
  # or:
  #   name="value"
  # Single-quoted attributes can contain double-quotes, and vice-versa, but
  # single-quotes in single-quoted attributes must be escaped.
  # 
  # To do this we start in Q_1, which consumes input until we arrive at
  # something that looks like an attribute name. In Q_2 we consume characters
  # for the attribute name until it looks like the attribute name is finished.
  # In Q_3 we read a single character to determine what type of quoting is
  # used for the attribute value. In Q_4 or Q_5, we read the attribute's value
  # until the string is closed, then go back to Q_1 (saving the attribute name
  # and value into the dictionary). We decide we are done when we encounter a
  # '>' or '/' in Q_1.

  # Constant states:
  state_EXPECTING_ATTRNAME = 1
  state_READING_ATTRNAME = 2
  state_EXPECTING_ATTRVALUE = 3
  state_READING_ATTRVALUE_SINGLEQUOTE = 4
  state_READING_ATTRVALUE_DOUBLEQUOTE = 5

  current_position = 0
  current_state = 1
  current_attrname = ""
  current_attrvalue = ""
  attributes = {}

  while True:
    if current_position >= len(string):
      raise xmlparse_XMLParseError(
          "Failed to parse element attribute list -- input ran out " + \
              "before we found a closing '>' or '/'")

    current_character = string[current_position]

    if current_state == state_EXPECTING_ATTRNAME:
      if current_character.isspace():
        pass    # We stay in this state
      elif current_character == '>' or current_character == '/':
        # We're finished reading attributes
        return (attributes, string[current_position:])
      else:
        current_attrname += current_character
        current_state = state_READING_ATTRNAME

    elif current_state == state_READING_ATTRNAME:
      if current_character.isspace():
        raise xmlparse_XMLParseError(
            "Failed to parse element attribute list -- attribute " + \
                "ended unexpectedly with a space")
      elif current_character == "=":
        current_state = state_EXPECTING_ATTRVALUE
      else:
        current_attrname += current_character

    elif current_state == state_EXPECTING_ATTRVALUE:
      if current_character == '\'':
        current_state = state_READING_ATTRVALUE_SINGLEQUOTE
      elif current_character == '"':
        current_state = state_READING_ATTRVALUE_DOUBLEQUOTE
      else:
        raise xmlparse_XMLParseError(
            "Failed to parse element attribute list -- attribute " + \
                "values must be quoted")

    elif current_state == state_READING_ATTRVALUE_SINGLEQUOTE:
      if current_character == '\'':
        attributes[current_attrname] = current_attrvalue
        current_state = state_EXPECTING_ATTRNAME
        current_attrname = ""
        current_attrvalue = ""
      else:
        current_attrvalue += current_character

    elif current_state == state_READING_ATTRVALUE_DOUBLEQUOTE:
      if current_character == '"':
        attributes[current_attrname] = current_attrvalue
        current_state = state_EXPECTING_ATTRNAME
        current_attrname = ""
        current_attrvalue = ""
      else:
        current_attrvalue += current_character

    current_position += 1




def _xmlparse_node_from_string(string):
  # string:
  #   <tag attr1="value" attr2='value'>content</tag>
  # Content may be a string or a list of children nodes depending on if the
  # first non-space character is a '<' or not.

  string = string.lstrip()
  if not string.startswith("<"):
    raise xmlparse_XMLParseError("Error parsing XML -- doesn't " + \
        "start with '<'")

  string = string[1:]

  read_pos = 0
  while True:
    if read_pos >= len(string):
      raise xmlparse_XMLParseError("Error parsing XML -- parser " + \
          "ran out of input trying to read a tag")

    # The tag name is ended with a space or a closing angle-brace or
    # a "/".
    curchar = string[read_pos]
    if curchar.isspace() or curchar == ">" or curchar == "/":
      break

    read_pos += 1

  tag = string[0:read_pos]
  string = string[read_pos:]

  # Get the attribute dictionary and remaining string (which will be
  # "> ... [ inner stuff ] </[tag_name]>" or "/>" for well-formed XML).
  attributes, string = _xmlparse_read_attributes(string)

  # "Empty" elements look like: "<[tag_name] [... maybe attributes] />" and
  # not "Empty" elements look like:
  # "<[tag_name] [... maybe attributes]> [inner content] </[tag_name]>".
  empty_element = False
  if string.startswith(">"):
    string = string[1:]
  elif string.startswith("/>"):
    string = string[2:]
    empty_element = True

  xmlnode = xmlparse_XMLTreeNode(tag)
  xmlnode.attributes = attributes

  if empty_element:
    xmlnode.content = ""

  else:
    # Locate the end-boundary of the inner content of this element.
    ending_tag_position = string.rfind("</")
    if ending_tag_position < 0:
      raise xmlparse_XMLParseError("XML parse error -- could not " + \
          "locate closing tag")

    # If this elements starting and closing tag names do not match, this XML
    # is not well-formed.
    if not string.startswith("</" + tag, ending_tag_position):
      raise xmlparse_XMLParseError("XML parse error -- different " + \
          "opening / closing tags at the same nesting level")

    # If the inner content starts with another element, this element has
    # children.  Otherwise, it has content, which is just a string containing
    # the inner content.
    tag_body = string[:ending_tag_position]
    if tag_body.lstrip().startswith("<"):
      xmlnode.children = _xmlparse_parse(tag_body.lstrip())
    else:
      xmlnode.content = tag_body

  return xmlnode




def _xmlparse_find_next_tag(xmldata):
  # Finds the position of the start of the next same-level tag in this XML
  # document.

  read_position = 0
  nested_depth = 0

  original_length = len(xmldata)
  xmldata = xmldata.lstrip()
  length_difference = original_length - len(xmldata)

  # Seek to another XML tag at the same depth.
  while True:
    if xmldata.startswith("</", read_position) or \
        xmldata.startswith("/>", read_position):
      nested_depth -= 1
    elif xmldata.startswith("<", read_position):
      nested_depth += 1

    read_position += 1

    if read_position >= len(xmldata):
      return read_position + length_difference

    if nested_depth == 0:
      nexttagposition = xmldata.find("<", read_position)

      if nexttagposition < 0:
        return original_length
      else:
        return nexttagposition + length_difference




def _xmlparse_parse(xmldata):
  # Takes a raw XML stream and returns a list of XMLTreeNodes.

  nodelist = []

  while True:
    # Whitespace between tags isn't important to the content of
    # an XML document.
    xmldata = xmldata.strip()

    # Strip out XML comments.
    if xmldata.startswith("<!--"):
      commentendloc = xmldata.find("-->", 4)
      if commentendloc < 0:
        raise xmlparse_XMLParseError("XML parse error -- comment " + \
            "missing close tag ('-->')")
      xmldata = xmldata[commentendloc+3:]
      continue

    # Find the end of the current tag.
    nexttagend = _xmlparse_find_next_tag(xmldata)

    thisnode_str = xmldata[0:nexttagend]
    xmldata = xmldata[nexttagend:]

    # Parse a tag out of the string we just found.
    thisnode = _xmlparse_node_from_string(thisnode_str)
    nodelist.append(thisnode)

    if not xmldata.strip().startswith("<"):
      break

  return nodelist

#end include xmlparse.repy
#begin include sockettimeout.repy		
"""
<Author>
  Justin Cappos, Armon Dadgar
  This is a rewrite of the previous version by Richard Jordan

<Start Date>
  26 Aug 2009

<Description>
  A library that causes sockets to timeout if a recv / send call would
  block for more than an allotted amount of time.

"""


class SocketTimeoutError(Exception):
  """The socket timed out before receiving a response"""


class _timeout_socket():
  """
  <Purpose>
    Provides a socket like object which supports custom timeouts
    for send() and recv().
  """

  # Initialize with the socket object and a default timeout
  def __init__(self,socket,timeout=10, checkintv='fibonacci'):
    """
    <Purpose>
      Initializes a timeout socket object.

    <Arguments>
      socket:
              A socket like object to wrap. Must support send,recv,close, and willblock.

      timeout:
              The default timeout for send() and recv().

      checkintv:
              How often socket operations (send,recv) should check if
              they can run. The smaller the interval the more time is
              spent busy waiting.
    """
    # Store the socket, timeout and check interval
    self.socket = socket
    self.timeout = timeout
    self.checkintv = checkintv


  # Allow changing the default timeout
  def settimeout(self,timeout=10):
    """
    <Purpose>
      Allows changing the default timeout interval.

    <Arguments>
      timeout:
              The new default timeout interval. Defaults to 10.
              Use 0 for no timeout. Given in seconds.

    """
    # Update
    self.timeout = timeout
  
  
  # Wrap willblock
  def willblock(self):
    """
    See socket.willblock()
    """
    return self.socket.willblock()


  # Wrap close
  def close(self):
    """
    See socket.close()
    """
    return self.socket.close()


  # Provide a recv() implementation
  def recv(self,bytes,timeout=None):
    """
    <Purpose>
      Allows receiving data from the socket object with a custom timeout.

    <Arguments>
      bytes:
          The maximum amount of bytes to read

      timeout:
          (Optional) Defaults to the value given at initialization, or by settimeout.
          If provided, the socket operation will timeout after this amount of time (sec).
          Use 0 for no timeout.

    <Exceptions>
      As with socket.recv(), socket.willblock(). Additionally, SocketTimeoutError is
      raised if the operation times out.

    <Returns>
      The data received from the socket.
    """

    # It's worth noting that this fibonacci backoff begins with a 2ms poll rate, and 
    # provides a simple exponential backoff scheme.

    fibonacci_backoff = False
    backoff_cap = 100 # Never use more than 100ms poll rate.

    pre_value = 1.0     # Our iterators for Fibonacci sequence.
    pre_pre_value = 1.0 # 

    # Since we want to be able to initialize with static poll rates (backwards 
    # compatibility) we specify a string if we're using the fibonacci backoff.
    if type(self.checkintv) is str:
      if self.checkintv == 'fibonacci':
        fibonacci_backoff = True

    # Set the timeout if None
    if timeout is None:
      timeout = self.timeout

    # Get the start time
    starttime = getruntime()

    # Block until we can read
    rblock, wblock = self.socket.willblock()
    while rblock:
      # Check if we should break
      if timeout > 0:
        # Get the elapsed time
        diff = getruntime() - starttime

        # Raise an exception
        if diff > timeout:
          raise SocketTimeoutError,"recv() timed out!"

      if fibonacci_backoff:
        # Iterate the sequence once
        sleep_length = pre_value + pre_pre_value
        pre_pre_value = pre_value
        pre_value = sleep_length

        # Make sure we don't exceed maximum backoff.
        if sleep_length > backoff_cap:
          sleep_length = backoff_cap

        # Unit conversion to seconds
        sleep_length = sleep_length / 1000.0

        # Sleep
        sleep(sleep_length)
      else: # Classic functionality.
        # Sleep
        try:
          sleep(float(self.checkintv))
        except:
          sleep(0.1)

      # If available, move to the next value of checkintv.
      

      # Update rblock
      rblock, wblock = self.socket.willblock()

    # Do the recv
    return self.socket.recv(bytes)


  # Provide a send() implementation
  def send(self,data,timeout=None):
    """
    <Purpose>
      Allows sending data with the socket object with a custom timeout.

    <Arguments>
      data:
          The data to send

      timeout:
          (Optional) Defaults to the value given at initialization, or by settimeout.
          If provided, the socket operation will timeout after this amount of time (sec).
          Use 0 for no timeout.

    <Exceptions>
      As with socket.send(), socket.willblock(). Additionally, SocketTimeoutError is
      raised if the operation times out.

    <Returns>
      The number of bytes sent.
    """
    # Set the timeout if None
    if timeout is None:
      timeout = self.timeout

    # Get the start time
    starttime = getruntime()

    # Block until we can write
    rblock, wblock = self.socket.willblock()
    while wblock:
      # Check if we should break
      if timeout > 0:
        # Get the elapsed time
        diff = getruntime() - starttime

        # Raise an exception
        if diff > timeout:
          raise SocketTimeoutError,"send() timed out!"

      # Sleep
      # Since switching to the fibonacci backoff, the nature of 
      # this field has changed. Rather than implement the backoff 
      # for checking block status (seems wasteful) we'll just use 
      # a constant value. Ten ms seems appropriate.
      sleep(0.010)

      # Update rblock
      rblock, wblock = self.socket.willblock()

    # Do the recv
    return self.socket.send(data) 




def timeout_openconn(desthost, destport, localip=None, localport=None, timeout=5):
  """
  <Purpose> 
    Wrapper for openconn.   Very, very similar

  <Args>
    Same as Repy openconn

  <Exception>
    Raises the same exceptions as openconn.

  <Side Effects>
    Creates a socket object for the user

  <Returns>
    socket obj on success
  """

  realsocketlikeobject = openconn(desthost, destport, localip, localport, timeout)

  thissocketlikeobject = _timeout_socket(realsocketlikeobject, timeout)
  return thissocketlikeobject





def timeout_waitforconn(localip, localport, function, timeout=5):
  """
  <Purpose> 
    Wrapper for waitforconn.   Essentially does the same thing...

  <Args>
    Same as Repy waitforconn with the addition of a timeout argument.

  <Exceptions> 
    Same as Repy waitforconn

  <Side Effects>
    Sets up event listener which calls function on messages.

  <Returns>
    Handle to listener.
  """

  # We use a closure for the callback we pass to waitforconn so that we don't
  # have to map mainch's to callback functions or deal with potential race
  # conditions if we did maintain such a mapping. 
  def _timeout_waitforconn_callback(localip, localport, sockobj, ch, mainch):
    # 'timeout' is the free variable 'timeout' that was the argument to
    #  timeout_waitforconn.
    thissocketlikeobject = _timeout_socket(sockobj, timeout)

    # 'function' is the free variable 'function' that was the argument to
    #  timeout_waitforconn.
    return function(localip, localport, thissocketlikeobject, ch, mainch)

  return waitforconn(localip, localport, _timeout_waitforconn_callback)

  
  


# a wrapper for stopcomm
def timeout_stopcomm(commhandle):
  """
    Wrapper for stopcomm.   Does the same thing...
  """

  return stopcomm(commhandle)
  
    


#end include sockettimeout.repy		
def hello(ip, port, sockobj, thiscommhandle, listencommhandle):
  message = sockobj.recv(10000000)  #Recieve bytes.
  """
  <nodename>name</nodename><status>REQUEST:RESPONSE</status><nodeIP>XXX.XXX.XXX.XXX</nodeIP>
  ALL NODE COMMUNICATION STARTS WITH <nodename>
  SCENARIO:
	1. VESSEL1 SAYS: "WHO HAS X SENSOR DATA?" <nodename>VESSEL1</nodename><status>REQUEST</status><nodeIP>ves.sel.1ip.me</nodeIP><message>X</message>
	2. VESSEL2 SAYS: "I DO! HERE IS MY X DATA FILE! <nodename>VESSEL2</nodename><status>RESPONSE</status><nodeIP>ves.sel.2ip.me</nodeIP><message>data.txt</message>
	3. VESSEL1 SAYS: "THANKS!" Save data.txt to tmp.txt for further search of the file to analyze for specific time and location (filtration parameters)

  """

  """
  AVAILABLE COMMANDS THAT CAN BE SENT TO THE NODES:
  1. <nodename><status></status><nodeIP></nodeIP><message></message></nodename>  =To connect to a vesel with either a request or response to some sensor data. This is 2-way communication.
  2. <iWant><sensor></sensor><parameters></parameters></iWant>  =iPhone wants some sensor value from the node with the given parameters. The return is the tmp.txt file from this node.
  3. <?xml>  =This is the SensorML that is sent from the iPhone to this node vessel to store in the data.txt file. If some node wants that, it requests is with (1) and is saved to the tmp.txt on their vessel.
  4. PING  =A ping command that is sent to a super-node to check if it is alive. This returns PONG if super-node, NOPE if not a super-node, and TIMEOUT if the socket times out.
  5. PONG  =A response to some ping command that is sent from a node to a super-node. If the vessel recieving the ping command is a super-node, it then responds with PONG. If it isn't, then it responds with NOPE.
  6. <REGISTER>  =A new node sends this command to a super-node and the super-node registers the new device and it's corresponding sensor by writing its IP and it's corresponding sensor to the nodes.txt.
  7. <storenode>  =Everytime a new node joins the network, the super-node informs all nodes on the same network that a new node has joined by sending its IP and corresponding sensor type. This command applies only applys to nodes because the super-node always has the most updated list of nodes on the network.
  8. DEFAULT  =If anything other than the above is sent to any node, it is counted as an "Are you there (AYT)" request and thus if the node is alive, it responds with "HERE!".


  """
  if(message.startswith("<nodename>")):  #We are connected to a vessel.
    print "Connected to node."

      
    status = find_between(message, "<status>", "</status>")  #Checks the status of the incoming packet.
    print status
    if (status == "REQUEST"):  #If an incoming packet is a request, we first check if the requested sensor type matches our sensor, then if this is true, we respond with our data.txt.
      if(find_between(message, "<message>", "</message>") == mycontext['my_sensor']):
				print "Node request from > "+ find_between(message, "<nodeIP>", "</nodeIP>")
				newfileobject = file("data.txt","r")
				sockobj.send("<nodename>"+mycontext['my_name']+"</nodename><status>RESPONSE</status><nodeIP>"+getmyip()+"</nodeIP><message>"+newfileobject.read()+"</message>")   
				newfileobject.close()  #Cleanup
      else:  #If the requested sensor type does not match our attached sensor, then inform the requester that we don't ave the data.
				print "Sorry, I don't have your data."
				sockobj.send("Sorry, I don't have your data.")
    else:   #If the incoming packet is a response, then we are being responded with our requested sensor type.
      print "Node response from > "+ find_between(message, "<nodeIP>", "</nodeIP>")
      saveToTMP(message)  #Save the responded sensor data from our request to the tmp file.
      """
				PROCEDURE:
				DOWNLOAD THE INCOMING FILE AND SAVE IT TO tmp.txt
				CALL FUNCTION TO ANALYZE OR USE THE TMP.TXT FILE FOR SEARCHING FOR THE SENSOR.
				DELETE TMP.TXT 
      """
  elif(message.startswith("<iWant>")):
		requestedSensor = find_between(message, "<sensor>", "</sensor>")
		print "iPhone wants: "+find_between(message, "<sensor>", "</sensor>")
		d = open("nodes.txt", "r")
		nodes = []
		for line in d:
			if line!="\n":
				nodes.append(line)
				if find_between(line, "<sensor>", "</sensor>") == requestedSensor:
					print "I found your requested sensor! "+ find_between(line, "<ip>", "</ip>")
					so = openconn(find_between(line, "<ip>", "</ip>"),63157)   

					so.send("<nodename>Vessel</nodename><status>REQUEST</status><nodeIP>"+getmyip()+"</nodeIP><message>"+requestedSensor+"</message>")
					resp = so.recv(100000)
					print resp
					saveToTMP(resp)
	#Check file list to see who has X. x
	#Return the IP who does. x
	#Send a REQUEST object with message X x
	#Returns the whole file which is saved to tmp.txt x
	#Push tmp.txt to iPhone.
	#create a socket connection to the corresponding node on the list that has that specific sensor.
  elif(message.startswith("<?xml")):  #We are connected to an iPhone that is sending us sensor data..
    print "Connected to iPhone."
    try:
      myfileobject = open("data.txt","a")  #Open data.txt for appending.
      print >> myfileobject, message  #Write the SML message to the myfileobject.
      myfileobject.close()  #Cleanup
      print "File open is a success."
      #my_sensor
      mycontext['my_sensor'] = find_between(message, "<swe:field name='sensorType'>", "</swe:field name='sensorType'>")
      #print mycontext['my_sensor']
      #my_name
      mycontext['my_name'] = find_between(message, "<swe:field name='deviceName'>", "</swe:field name='deviceName'>")
      #print mycontext['my_name']
      #my_lat
      mycontext['my_lat'] = find_between(message, "<swe:field name='latitude'>", "</swe:field name='latitude'>")
      #print mycontext['my_lat']
      #my_long
      mycontext['my_long'] = find_between(message, "<swe:field name='longitude'>", "</swe:field name='longitude'>")
      #print mycontext['my_long']
      #my_battery
      mycontext['my_battery'] = find_between(message, "<swe:field name='batteryLevel'>", "</swe:field name='batteryLevel'>")
      #print mycontext['my_battery']
      #my_time
      mycontext['my_time'] = find_between(message, "<swe:field name='timeStamp'>", "</swe:field name='timeStamp'>")
      #print mycontext['my_time']
      #my_sensorVal
      mycontext['my_sensorVal'] = find_between(message, "<swe:field name='sensorValue'>", "</swe:field name='sensorValue'>")
      #print mycontext['my_sensorVal'];
      sockobj.send("Success.\n")
    except:
      print "File open failed."  #Something happend. Possibly a file write error. However, iPhone learns about this and does something with this error.
      sockobj.send("Fail.\n")

  elif(message.startswith("PING")):
    IAmBoostraper(sockobj)  #If we recieve a PING request, this means that some node is trying to check if the super node is alive. If so, then we, the super-node respond with a PONG command.
  elif(message.startswith("PONG")):
    checkIfBootstraper()  #If we recieve a PONG response, then this means that a super-node has confirmed that it is successfully alive.
  elif(message.startswith("<REGISTER>")):
  		
    if getmyip()==mycontext['primary']:  #Only super-nodes can register a new node to the network.
      #addToNodeList(message, sockobj)  #Write the vessel's ip address and its corresponding sensor and tell every node about it.
      obj = open("nodes.txt", "a")
      print >> obj, find_between(message, "<REGISTER>", "</REGISTER>")
      obj.close()
      pushToAllNodes(sockobj)
    else:
      sockobj.send("Error: You must register with a super node.")
  elif(message.startswith("<storenode>")):  #If we recieve a storenode command, then we must store the passed node's IP address and its corresponding sensor.
    node = find_between(message, "<storenode>", "</storenode>")
    print node
    """if find_between(node, "<ip>", "</ip>") == getmyip():  #ERROR: THIS DOESN'T SEEM TO WORK :( If the problem persits, then just send the whole file and when reading, just ignore ourselves.
      print "My IP will be ommitted from the list."  #If we are registering ourselves, omit.
      node = "" """
    f = open("nodes.txt","w")  #Just write all nodes to nodes.txt
    print >> f, node  #Print to nodes.txt file
    #Implement a way to distribute this whole file to every node on the network. 
  else:
    print "AYT REQUEST!"  #If we get something we don't like, then just take it as an AYT request and respond with, yes I'm here! This is like ping, but only for nodes.
    sockobj.send('Here!')
  stopcomm(thiscommhandle)

def pushToAllNodes(sockobj):
  sockobj.send("REGISTER OK") #Sends an REGISTER OK message to acknowledge.
  ins = open("nodes.txt", "r") #Open the nodes.txt file for reading.
  x = ins.read()
  ins.close()  #Close so that we don't have a file handle error.
  lol = open("nodes.txt", "r")  #Create a new file reader so that we read lines and parse for ips.
  listOfNodes = lol.readlines()
  lol.close()

  nodes = []  #Create a new array of node ips
  for line in listOfNodes:
    if line != "\n":  #Add all IPs to the nodes array and exclude any new line commands.
      nodes.append(find_between(line, "<ip>", "</ip>"))
  for ip in nodes:
    if ip=="\n": 
      print "Ignoring blank message."
    else:

      s = openconn(ip, 63157)
      s.send("<storenode>"+x+"</storenode>") #Sends the whole file to all nodes on the network. Let's measure speed on this.
      s.close()


def checkIfBootstraper():
  print 'CheckIfBootstraper'   #Unimplemented/Deprecated

#Makeshift XML parser.
def find_between( s, first, last ):
    
  start = s.index( first ) + len( first )
  end = s.index( last, start )
  return s[start:end]

def saveToTMP(message):  #This saves the requested sensor data to the local tmp.txt file for pushing the results to the iPhone.

  myfileobject = open("tmp.txt","a")
  
  print >> myfileobject, find_between(message, "<message>", "</message>")
  #PUSH THE TMP TO iPhone


def IAmBoostraper(socketobject):  #This is intended to check if the ping is a bootstraper... Let's fix this later.
  
  if (mycontext['primary'] == getmyip()):
    print 'I am Bootstraper with IP: '+getmyip()
    socketobject.send("PONG\n")		
  else:
    print 'I am not the bootstraper. '
    socketobject.send("NOPE\n")
    """if pingNode(mycontext['primary']) == 'TIMEOUT':
      print "Node at: "+mycontext['primary']+" is off. Trying secondary..."
      if pingNode(mycontext['secondary']) == 'TIMEOUT':
        print "Node at: "+mycontext['secondary']+" is dead. Trying fallback..."
        if pingNode(mycontext['fallback']) == 'TIMEOUT':
          print "Node at: "+mycontext['fallback']+" is dead. Returning..."
        else:
          print "Using fallback node as bootstraper."
          mycontext['bootstrap'] = mycontext['secondary']
      else:
        print "Using secondary node as bootstraper."
        mycontext['bootstrap'] = mycontext['secondary']
    else:
      print "Using primary node as bootstraper."
      mycontext['bootstrap'] = mycontext['primary']"""
      

    #TO-DO: FINISH THE BOOTSTRAPER KEEP-ALIVE PING. IT SHOULD PING THE SERVER EVERY TWO HOURS OR WHEN IT IS INACTIVE. ALSO, CREATE 2 MORE CALL ARGS TO ALLOW FOR PRIMARY, SECONDARY, AND FALLBACK   			BOOTSTRAPERS. We have a problem with the pinging. If there is a timeout, I need to catch the exception. Why aren't I catching it?
    #JUST IN CASE OF A PROBLEM IN ONE OF THE BOOTSTRAPER NODES. 
    #AGAIN, THE PURPOSE OF A BOOTSTRAPER NODE IS TO MAINTAIN A LIST OF VESSEL IPs AND THEIR CORRESPONDING SENSOR. THAT LIST NEEDS TO BE PUSHED TO ALL VESSELS AS SOON AS A NODE JOINS THE NETWORK. 
    #TO FINISH THIS PROGRAM, I NEED TO DO:
    #1. FINISH BOOTSTRAPER
    #2. CREATE A WAY TO SEE HOW DATA IS BEING TRANSFERRED BETWEEN NODES AND THEIR IPHONES.
		#3. Viz on graphs?
def pingNode(ip):  #Pings any super-node for a keep-alive command. Make a way to check if there is a socket timeout.
    # open a connection to the bootstrap
    try:
      data = sendmess(ip,63157, "PONG") 
      print data;
    except Exception, e:
      print str(e)
  
if callfunc == 'initialize':  #Main call func.

  if len(callargs) > 4:
    raise Exception("Too many call arguments")

  # Running remotely:
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call hello
  elif len(callargs) == 4:
    mycontext['primary'] = callargs[1]
    print "Primary bootstraper IP: "+mycontext['primary']
    if mycontext['primary'] == getmyip():
      m = open("nodes.txt","w")
      print >>m, "<ip>"+getmyip()+"</ip><sensor>x</sensor>\n"
      m.close() 
    mycontext['secondary'] = callargs[2]
    print "Secondary bootsraper IP: "+mycontext['secondary']
    mycontext['fallback'] = callargs[3]
    print "Fallback bootstrap IP: "+mycontext['fallback']
    
    port = int(callargs[0])
    ip = getmyip()
    print " _______  _______  _______ __________________ _        _______  _______  _______  _        _______  _______  _______  _______ "
    print "(  ____ \(  ____ \(  ___  )\__   __/\__   __/( \      (  ____ \(  ____ \(  ____ \( (    /|(  ____ \(  ___  )(  ____ )(  ____ \ "
    print "| (    \/| (    \/| (   ) |   ) (      ) (   | (      | (    \/| (    \/| (    \/|  \  ( || (    \/| (   ) || (    )|| (    \/"
    print "| (_____ | (__    | (___) |   | |      | |   | |      | (__    | (_____ | (__    |   \ | || (_____ | |   | || (____)|| (_____ "
    print "(_____  )|  __)   |  ___  |   | |      | |   | |      |  __)   (_____  )|  __)   | (\ \) |(_____  )| |   | ||     __)(_____  )"
    print "      ) || (      | (   ) |   | |      | |   | |      | (            ) || (      | | \   |      ) || |   | || (\ (         ) |"
    print "/\____) || (____/\| )   ( |   | |      | |   | (____/\| (____/\/\____) || (____/\| )  \  |/\____) || (___) || ) \ \__/\____) |"
    print "\_______)(_______/|/     \|   )_(      )_(   (_______/(_______/\_______)(_______/|/    )_)\_______)(_______)|/   \__/\_______)"

  else:
    port = 63157
    ip = '127.0.0.1'
  
  
  listencommhandle = waitforconn(ip,port,hello)










